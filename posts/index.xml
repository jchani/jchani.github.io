<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Justin Chan</title>
        <link>https://justinchan.one/posts/</link>
        <description>Recent content in Posts on Justin Chan</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 23 Aug 2020 17:41:57 -0700</lastBuildDate>
        <atom:link href="https://justinchan.one/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Going from Java to Python: the Good, the Surprising, and the Bad</title>
            <link>https://justinchan.one/posts/java-to-python/</link>
            <pubDate>Sun, 23 Aug 2020 17:41:57 -0700</pubDate>
            
            <guid>https://justinchan.one/posts/java-to-python/</guid>
            <description>7 months ago I joined Lyft from Salesforce. It’s been interesting seeing the differences in the two companies’ tech stacks, tooling and culture. Now that I’ve completed several projects, I feel somewhat equipped to share my two cents on working in a Java vs. Python codebase. It’s certainly not an apples to apples comparison, as a developer’s experience is affected by many factors including infrastructure, tech debt, company culture, and the specific framework and libraries used1.</description>
            <content type="html"><![CDATA[<p>7 months ago I joined Lyft from Salesforce. It’s been interesting seeing the differences in the two companies’ tech stacks, tooling and culture. Now that I’ve completed several projects, I feel somewhat equipped to share my two cents on working in a Java vs. Python codebase. It’s certainly not an apples to apples comparison, as a developer’s experience is affected by many factors including infrastructure, tech debt, company culture, and the specific framework and libraries used<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>Programming language comparisons are also a bit of a touchy subject for some engineers, so I&rsquo;ll try not to add fuel to the flame war. It&rsquo;s understandably hard to remain objective given the time investment it takes to learn a language, the fact that most of us don&rsquo;t have production-grade experience with many languages, and the effect language-specific expertise can have on job prospects.</p>
<p>But let’s dive into it.</p>
<h2 id="the-good">THE GOOD</h2>
<p>Python’s defining feature is its simple syntax.</p>
<p><strong>Indents vs. curly braces</strong></p>
<p>A Java programmer working in a decently sized codebase would use an IDE with linting rules. These rules would require code to be formatted with spaces/indents anyways for readability, making curly braces largely redundant. It’s been nice not having to chase down an errant curly brace.</p>
<p><strong>Standalone functions</strong></p>
<p>Python functions can exist outside of a class unlike in Java. In Java, I found myself creating classes just to “house” functions.</p>
<p><strong>Simpler classes and fields</strong></p>
<p>In Java, all classes need to have a constructor with getters and setters for public or protected fields. These can be generated by an IDE, but it’s just more boilerplate to read and review. In Python, all fields are public and private fields are prefixed with an underscore, enforced by the programmer and linting rules. There’s no need for getters and setters, although @property can be used for data derived from class variables.</p>
<p><strong>Tuples</strong></p>
<p>A tuple is a grouping of objects that can have the same or different type. This is especially useful for returning values from functions - in Java I found myself creating a class just to pass data when sometimes a tuple would do the job.</p>
<p><strong>Data structures: simpler initialization</strong></p>
<p>This has been a big win for me. Pretty self-explanatory, so I’ll just leave an example.</p>
<ul>
<li>A dictionary in Python:
<code>dict = {}</code>.</li>
<li>In Java, here’s an article on <a href="https://www.baeldung.com/java-initialize-hashmap">~8 ways to initialize the equivalent data structure (hashmap)</a>. Sometimes flexibility ends up being a hassle because it places additional burden on the developer to remember and maintain best practices, which are also constantly changing.</li>
</ul>
<p><strong>Simpler dependency management</strong></p>
<ul>
<li>
<p>In Java + Maven:
Tries to do too much - dependency management, configuration for test execution and deployments etc. Configuration files in xml format that support inheritance =&gt; poor readability and lots of ways to shoot yourself in the foot.</p>
<pre><code>   &lt;dependency&gt;
     &lt;groupId&gt;group-a&lt;/groupId&gt;
     &lt;artifactId&gt;artifact-b&lt;/artifactId&gt;
     &lt;version&gt;1.0&lt;/version&gt;
     &lt;type&gt;bar&lt;/type&gt;
     &lt;scope&gt;runtime&lt;/scope&gt;
   &lt;/dependency&gt;
</code></pre></li>
<li>
<p>In Python + pip: requirements.txt file specifies package versions (which is also similar to package.json or yarn.lock for those coming from the front-end world):</p>
<pre><code>  `keyring &gt;= 4.1.1`
</code></pre>
</li>
</ul>
<h2 id="the-surprising">THE SURPRISING</h2>
<p>There’s a few things that I’ve found surprising, but I’ve yet to decide if they can just be lumped into “good” or “bad”. Of course, I found these out the hard way (and will stumble upon more).</p>
<p><strong>Variables are function scoped, not block scoped</strong></p>
<p>Strange at first, but not that big of a deal if your classes and functions are properly modularized.</p>
<p><strong>Object comparison: use ‘==’ instead of ‘is’</strong></p>
<p>This is the subject of entire blog posts by other folks. I’ll spare the details for the footnotes<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. It&rsquo;s not quite the confusing shitstorm that is Javascript equality, but can be a bit confusing:</p>
<pre><code>(“” + ‘1234’) is ‘1234’
True

“”.join(‘1234’) is ‘1234’ 
False
</code></pre><h2 id="the-bad">THE BAD</h2>
<p><strong>No static types</strong></p>
<p>At first I thought it would be like the wild west. How can anyone read and understand a codebase with commits from over a thousand engineers without static typing?
The solution is Mypy which supports type annotations, which we mainly use for functions. Pycharm linting + precommit hooks to run checks (ex: flake8 and mypy) ensure code is formatted properly.
Mypy isn’t perfect though and some idiosyncrasies have been a time sink. Code navigation in an IDE is also not as powerful for Python than it is for Java. Searching for function references leads to lots of false positives, especially for functions with generic names like “act()”. Not sure if this is due to limitations from Pycharm or dynamic types.</p>
<p><strong>Performance</strong></p>
<p>It’s commonly accepted that Python code execution is slower than Java’s because the former is an “interpreted language” while the latter is a “compiled” one. The counterpoint is that whatever gains in performance are probably offset by slower speed of development in Java, at least for app development. Java or Go are more suitable for performance-intensive code, and C/C++ for very low latency systems. Back end code at any serious mid to large-sized tech company is almost never written in just one language as each has their own set of strengths and weaknesses, and teams tackling different problems will require different solutions. If you only have a hammer, everything starts looking like a nail.</p>
<h2 id="conclusion">CONCLUSION</h2>
<p>Overall doing product development work, I would take Python over Java. I find I’m able to iterate faster without sacrificing much quality <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. Perhaps the real test is for the poor soul who has to build upon my code in a couple years time. But more importantly, I enjoy writing code in Python more. I think part of it is the intuitive syntax allows me to reserve my limited brainpower for higher level problems.</p>
<p>I&rsquo;m sure many app developers have perfectly valid reasons to disagree with me though. Java has a huge following and is widely used for infrastructure or “big data” problems<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>. Also, if I were in a self-driving car, let’s just say I’d rather have the app logic be written in a statically typed language like Java rather than Python.</p>
<p>Programming languages in general evolve and try to adopt the best parts of other languages ie. more powerful type systems in JavaScript and Python, and support for functional programming in Java. How far they can evolve though is hindered by backwards compatibility though - billions of dollars of software still running on a particular language version. This is where a newer language, like Go, can have an advantage. In general, I think learning multiple languages and thinking about their differences is interesting and a beneficial exercise for anyone wanting to become a better software engineer. After all, if you only have a hammer, everything starts looking like a nail.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Salesforce was using Java 8, latest is 12. Lyft uses Python 3.6/3.7, latest is 3.8. Business factors, differences in your level of experience, and the structure of the codebase (microservices vs. monolith vs. distributed monolith) also make fair comparisons difficult. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>String equality in Java, Javascript and Python.
In Java, ‘==’ is supposed to be used for primitives and .equals() for objects and each object should define its own equals method (if none is supplied, it will compare by reference just like ‘==’ does for objects).
In Javascript, ‘==’ uses type coercion to compare values, whereas ‘===’ also checks for type equality.
In Python, there are no primitives, only objects. ‘‘is”, which checks for object identity is only recommended to be used with language-specific singletons like True, False or None. ‘==’  should be used for everything else. Like Java, an <strong>eq</strong> method has to be specified, otherwise it will default to reference equality. Seems like it’s hard to write a truly correct <strong>eq</strong> method in Python in a concise way: <a href="https://stackoverflow.com/a/25176504/5142754">https://stackoverflow.com/a/25176504/5142754</a> <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>I’ve shipped my share of bugs though, a few of which may have been prevented if types were checked at compile-time instead of runtime. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>Anecdotally, an Airbnb staff infra engineer friend of mine codes primarily in Java, while a senior infra one at Twilio uses Scala, which runs on the JVM and I&rsquo;ve heard it be described as Java with greater support for functional programming. <a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content>
        </item>
        
        <item>
            <title>Hello World</title>
            <link>https://justinchan.one/posts/hello-world/</link>
            <pubDate>Mon, 20 Jul 2020 09:09:29 -0700</pubDate>
            
            <guid>https://justinchan.one/posts/hello-world/</guid>
            <description>I&amp;rsquo;m starting this site to encourage myself to reflect and think through things more deeply, something I think is important in a world that gravitates towards sound bites and reductionism. There&amp;rsquo;ll be posts on my interests, current events, books I&amp;rsquo;ve read, life experiences, and questions I find interesting.
It&amp;rsquo;ll also be a record of sorts for myself. Past photos and videos are great for reliving highs and lows, but don&amp;rsquo;t quite capture our thoughts at a particular moment in time in high resolution.</description>
            <content type="html"><![CDATA[<p>I&rsquo;m starting this site to encourage myself to reflect and think through things more deeply, something I think is important in a world that gravitates towards sound bites and reductionism. There&rsquo;ll be posts on my interests, current events, books I&rsquo;ve read, life experiences, and <a href="https://justinchan.one/questions/">questions I find interesting</a>.</p>
<p>It&rsquo;ll also be a record of sorts for myself. Past photos and videos are great for reliving highs and lows, but don&rsquo;t quite capture our thoughts at a particular moment in time in high resolution.</p>
<p>Somewhat selfishly, in the future I&rsquo;m hoping I can just share a link to a post instead of re-explaining things and having to deal with the lossiness of my own memory, but we&rsquo;ll see if we get there.</p>
]]></content>
        </item>
        
    </channel>
</rss>
